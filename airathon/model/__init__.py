# AUTOGENERATED! DO NOT EDIT! File to edit: model.ipynb (unless otherwise specified).

__all__ = ['Dataset', 'get_y', 'location_to_one_hot', 'get_x', 'ImageModel', 'MyModel', 'create_compiled_model']

# Cell
import os
import os.path as path
from typing import Tuple

import dateutil.parser as parser
import numpy as np
import tensorflow as tf
import tensorflow.keras as keras

import airathon.data.tfrecord as tfrecord
import airathon.paths as paths
from ..metrics import R2

# Cell
Dataset = tf.data.Dataset

# Cell
@tf.function
def _get_y(x):
    return tf.reshape(x["value"], (1,))

def get_y(dataset: Dataset) -> Dataset:
    return dataset.map(_get_y, num_parallel_calls=tf.data.AUTOTUNE)

# Cell
@tf.function
def location_to_one_hot(location: tf.Tensor):
    if location == "tpe":
        return tf.constant([1, 0, 0], dtype=tf.float32)
    if location == "la":
        return tf.constant([0, 1, 0], dtype=tf.float32)

    return tf.constant([0, 0, 1], dtype=tf.float32)

# Cell
@tf.function
def _get_x(x):
    sds_0 = tf.reshape(x["sds_0"], (-1,))
    sds_3 = tf.reshape(x["sds_3"], (-1,))
    sds_4 = tf.reshape(x["sds_4"], (-1,))
    sds_8 = tf.reshape(x["sds_8"], (-1,))

    location = location_to_one_hot(x["location"])

    output = tf.concat([sds_0, sds_3, sds_4, sds_8, location], axis=0)

    return output

def get_x(x: Dataset) -> Dataset:
    return x.map(_get_x, num_parallel_calls=tf.data.AUTOTUNE)

# Cell
class ImageModel(keras.models.Model):
    def __init__(self) -> None:
        super().__init__()
        self._input = keras.layers.InputLayer((240, 240, 4))

        self.conv2d1 = keras.layers.Conv2D(
            filters=16,
            kernel_size=(3, 3),
            activation="relu")

        self.maxpool1 = keras.layers.MaxPool2D()
        self.dropout1 = keras.layers.Dropout(0.25)

        self.conv2d2 = keras.layers.Conv2D(
            filters=16,
            kernel_size=(3, 3),
            activation="relu")

        self.maxpool2 = keras.layers.MaxPool2D()
        self.dropout2 = keras.layers.Dropout(0.25)
        self.flatten = keras.layers.Flatten()

    def call(self, image):
        image = self._input(image)
        image = self.conv2d1(image)
        image = self.maxpool1(image)
        image = self.dropout1(image)
        image = self.conv2d2(image)
        image = self.maxpool2(image)
        image = self.dropout2(image)

        image = self.flatten(image)

        return image


class MyModel(keras.models.Model):
    def __init__(self) -> None:
        super().__init__()

        self.call_count = 0

        self._input = keras.layers.InputLayer((240 * 240 * 4 * 4 + 3,))

        self.image1 = ImageModel()
        self.image2 = ImageModel()
        self.image3 = ImageModel()
        # self.image4 = ImageModel()

        self.dense1 = keras.layers.Dense(64, activation="relu")
        self.dropout3 = keras.layers.Dropout(0.2)
        self.dense2 = keras.layers.Dense(32, activation="relu")
        self.dropout4 = keras.layers.Dropout(0.2)
        self.dense3 = keras.layers.Dense(16, activation="relu")
        self.dense4 = keras.layers.Dense(1)

    def call(self, x: tf.Tensor) -> tf.Tensor:
        x = self._input(x)

        image_size = 240 * 240 * 4
        location_size = 3

        image1 = x[:, 0:image_size]
        image1 = tf.reshape(image1, (-1, 240, 240, 4))

        image2 = x[:, image_size:image_size * 2]
        image2 = tf.reshape(image2, (-1, 240, 240, 4))

        image3 = x[:, image_size * 2:image_size * 3]
        image3 = tf.reshape(image3, (-1, 240, 240, 4))

        # image4 = x[:, image_size * 3:image_size * 4]
        # image4 = tf.reshape(image4, (-1, 240, 240, 4))

        location = x[:, image_size * 4:]
        location = tf.reshape(location, (-1, 3))

        image1 = self.image1(image1)
        image2 = self.image2(image2)
        image3 = self.image3(image3)
        # image4 = self.image4(image4)

        x = tf.concat([image1, image2, image3, location], axis=1)

        x = self.dense1(x)
        x = self.dropout3(x)
        x = self.dense2(x)
        x = self.dropout4(x)
        x = self.dense3(x)
        x = self.dense4(x)

        return x


def create_compiled_model() -> keras.Model:
    model = MyModel()

    model.compile(
        loss="MSE",
        optimizer="adam",
        metrics=[R2(), keras.metrics.RootMeanSquaredError()])

    return model